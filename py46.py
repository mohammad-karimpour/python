""" ارث بری """
# ارث بردن از یک کلاس برای جلو گیری از تکرار کد

class User:
    def __init__(self, name) -> None:
        self.anme = name
    
    def Showname(self):
        print(self.anme)


# Peoul = User
class Pepul(User):
    pass


# ساخت نمونه
P_1 = Pepul('mohammad')
P_1.Showname() 





# ما میتوانیم از کلاس های خود پایتون هم ارث بری کنیم 
# ما میتوانیم به کلاس های خود پایتون قلبلیت اضافه کنیم و از این کلاس به جای کلاس اصلی استفاده کنیم
# اورراید : یعنی تغیر یک متد از کلاس های خود پایتون مثلا تغیر عملکرد متد اپیند
class NewList(list):
    pass





""" سپردن کاری به کلاس پدر """
# super

# ما اگر بخواهیم یک متد مانند اینیت بسازیم که در کلاس پدر هم وجود دارد عملا ارث بری برای آن متد مختل میشود برای همین کار باید از سوپر استفاده شود تا کار هایی که میخواهیم کلاس پدر انجام دهد را بهش بدهیم و مابقی کار را با متد فرزند انجام بدهیم
# مانند __init__

# ساختار سوپر
""" super().method(args) """


class worker(User):
    def __init__(self, name ,age):
        super().__init__(name) # ما اینجا نام را دادیم به متد اینیت کلاس پدر تا برایمان انجام دهد
        self.age = age




# وراثت چندگانه
# ما میتوانیم از چند کلاس همزمان ارث بری کنیم

class tee(Pepul , User):
    pass